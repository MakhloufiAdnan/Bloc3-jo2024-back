name: CI/CD Pipeline

on:
  push:
    branches:
      - main  # Déclenchement sur un push vers la branche `main`

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout du code
      - name: Checkout repository
        uses: actions/checkout@v2

      # 2. Se connecter à Docker Hub 
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 3. Build des images Docker pour le backend
      - name: Build backend Docker image
        run: |
          cd backend
          mvn clean install -DskipTests
          docker build -t myapp-backend .

      # 4. Build des images Docker pour le frontend
      - name: Build frontend Docker image
        run: |
          cd frontend
          docker build -t myapp-frontend .

      # 5. Build des images Docker pour la base de données
      - name: Build PostgreSQL Docker image (si nécessaire)
        run: |
          docker pull postgres:17-alpine

      # 6. Push des images Docker sur Docker Hub (ou autre registre)
      - name: Push backend Docker image
        run: |
          docker tag myapp-backend:latest mydockerhubusername/myapp-backend:latest
          docker push mydockerhubusername/myapp-backend:latest

      - name: Push frontend Docker image
        run: |
          docker tag myapp-frontend:latest mydockerhubusername/myapp-frontend:latest
          docker push mydockerhubusername/myapp-frontend:latest

      # 7. Déployer sur un serveur distant via SSH
      - name: Deploy to server
        run: |
          ssh -o StrictHostKeyChecking=no user@your-server-ip "
          docker pull mydockerhubusername/myapp-backend:latest &&
          docker pull mydockerhubusername/myapp-frontend:latest &&
          docker-compose down && 
          docker-compose up -d
          "
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}

