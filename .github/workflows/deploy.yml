name: Deploy to Heroku

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: heroku

    steps:
      # 1. Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Set up JDK 21 for backend
      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      # 3. Check Java version
      - name: Check Java version
        run: java -version

      # 4. Install Heroku CLI
      - name: Install Heroku CLI
        run: |
          curl https://cli-assets.heroku.com/install.sh | sh
          heroku --version

      # 5. Set up Heroku authentication
      - name: Set up Heroku auth
        run: |
          printf "machine api.heroku.com\n  login %s\n  password %s\nmachine git.heroku.com\n  login %s\n  password %s\n" \
            "${{ secrets.HEROKU_EMAIL }}" "${{ secrets.HEROKU_API_KEY }}" \
            "${{ secrets.HEROKU_EMAIL }}" "${{ secrets.HEROKU_API_KEY }}" \
          > ~/.netrc
          chmod 600 ~/.netrc
          heroku auth:whoami

      # 6. Set Heroku config vars
      - name: Set Backend Heroku config vars
        run: |
          heroku config:set SPRING_PROFILES_ACTIVE=docker \
            ALWAYS_POSTGRES_HOST=${{ secrets.ALWAYS_POSTGRES_HOST }} \
            ALWAYS_POSTGRES_PORT=${{ secrets.ALWAYS_POSTGRES_PORT }} \
            ALWAYS_POSTGRES_DB=${{ secrets.ALWAYS_POSTGRES_DB }} \
            ALWAYS_POSTGRES_USER=${{ secrets.ALWAYS_POSTGRES_USER }} \
            ALWAYS_POSTGRES_PASSWORD=${{ secrets.ALWAYS_POSTGRES_PASSWORD }} \
            JWT_SECRET=${{ secrets.JWT_SECRET }} \
            JWT_EXPIRATION=${{ secrets.JWT_EXPIRATION }} \
            EMAIL_USERNAME=${{ secrets.EMAIL_USERNAME }} \
            EMAIL_PASSWORD=${{ secrets.EMAIL_PASSWORD }} \
            ADMIN_EMAIL=${{ secrets.ADMIN_EMAIL }} \
            ADMIN_PASSWORD=${{ secrets.ADMIN_PASSWORD }} \
            SMTP_HOST=${{ secrets.SMTP_HOST }} \
            SMTP_PORT=${{ secrets.SMTP_PORT }} \
            ID_GOOGLE=${{ secrets.ID_GOOGLE }} \
            MDP_GOOGLE=${{ secrets.MDP_GOOGLE }} \
            FRONTEND_URL_CONF=${{ secrets.FRONTEND_URL_CONF }} \
            FRONTEND_URL_RESET=${{ secrets.FRONTEND_URL_RESET }} \
            JAVA_TOOL_OPTIONS="-Xms150m -Xmx150m -Xss256k -XX:MetaspaceSize=64m -XX:MaxMetaspaceSize=96m -XX:ReservedCodeCacheSize=64m -XX:InitialCodeCacheSize=32m -XX:+UseSerialGC -XX:NativeMemoryTracking=detail -Duser.timezone=UTC -XX:+ExitOnOutOfMemoryError -XX:+UnlockDiagnosticVMOptions -XX:+PrintNMTStatistics -Xlog:gc*:file=/tmp/gc.log:time,level,tags:filecount=5,filesize=10m \
            
            --app ${{ secrets.HEROKU_APP_NAME_BE }}

      # 7. Build & Deploy Backend to Heroku
      - name: Build & Deploy Backend to Heroku
        run: |
          mvn clean install -DskipTests
          heroku stack:set container --app ${{ secrets.HEROKU_APP_NAME_BE }}
          heroku container:login
          docker build . --platform linux/amd64 \
            -t registry.heroku.com/${{ secrets.HEROKU_APP_NAME_BE }}/web
          docker push registry.heroku.com/${{ secrets.HEROKU_APP_NAME_BE }}/web
          heroku container:release web --app ${{ secrets.HEROKU_APP_NAME_BE }}

      # 8. Install PostgreSQL client for AlwaysData
      - name: Install PostgreSQL client
        run: sudo apt-get update && sudo apt-get install -y postgresql-client

      # 9. Show Backend Heroku logs
      - name: Show Backend Heroku logs
        run: heroku logs --app ${{ secrets.HEROKU_APP_NAME_BE }} --num 50

      # 10. Arrêter les dynos
      - name: Stop Heroku Dynos
        if: ${{ false }} # désactivé par défaut
        run: |