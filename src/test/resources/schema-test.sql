-- Supprimer les tables si elles existent pour un environnement de test
DROP TABLE IF EXISTS auth_tokens_temporaire CASCADE;
DROP TABLE IF EXISTS authentifications CASCADE;
DROP TABLE IF EXISTS billet_offre CASCADE;
DROP TABLE IF EXISTS billets CASCADE;
DROP TABLE IF EXISTS commandes CASCADE;
DROP TABLE IF EXISTS comporter CASCADE;
DROP TABLE IF EXISTS contenu_panier CASCADE;
DROP TABLE IF EXISTS transactions CASCADE;
DROP TABLE IF EXISTS paiements CASCADE;
DROP TABLE IF EXISTS paniers CASCADE;
DROP TABLE IF EXISTS offres CASCADE;
DROP TABLE IF EXISTS disciplines CASCADE;
DROP TABLE IF EXISTS epreuves CASCADE;
DROP TABLE IF EXISTS pratiquer CASCADE;
DROP TABLE IF EXISTS athletes CASCADE;
DROP TABLE IF EXISTS telephones CASCADE;
DROP TABLE IF EXISTS oauths CASCADE;
DROP TABLE IF EXISTS utilisateurs CASCADE;
DROP TABLE IF EXISTS roles CASCADE;
DROP TABLE IF EXISTS adresses CASCADE;
DROP TABLE IF EXISTS pays CASCADE;
DROP TABLE IF EXISTS methodes_paiement CASCADE;

-- Création des tables pour H2 (les types ENUM PostgreSQL sont remplacés par VARCHAR)

CREATE TABLE pays (
                      id_pays BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                      nom_pays VARCHAR(100) NOT NULL
);

CREATE TABLE adresses (
                          id_adresse BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                          numero_rue INT NOT NULL,
                          nom_rue VARCHAR(255) NOT NULL,
                          ville VARCHAR(50) NOT NULL,
                          code_postal VARCHAR(10) NOT NULL,
                          complement_adresse VARCHAR(255),
                          id_pays BIGINT NOT NULL,
                          FOREIGN KEY (id_pays) REFERENCES pays(id_pays)
);

CREATE TABLE roles (
                       id_role BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                       type_role VARCHAR(255) NOT NULL UNIQUE
);

CREATE TABLE utilisateurs (
                              id_utilisateur_uuid UUID PRIMARY KEY,
                              email VARCHAR(250) NOT NULL UNIQUE,
                              nom VARCHAR(50) NOT NULL,
                              prenom VARCHAR(50) NOT NULL,
                              date_naissance DATE NOT NULL,
                              date_creation TIMESTAMP(6) NOT NULL,
                              cle_utilisateur VARCHAR(255) UNIQUE,
                              is_verified BOOLEAN NOT NULL,
                              id_role BIGINT NOT NULL,
                              id_adresse BIGINT NOT NULL,
                              FOREIGN KEY (id_role) REFERENCES roles(id_role),
                              FOREIGN KEY (id_adresse) REFERENCES adresses(id_adresse)
);
CREATE INDEX idx_utilisateurs_email ON utilisateurs (email);
CREATE INDEX idx_utilisateurs_adresse ON utilisateurs (id_adresse);


CREATE TABLE authentifications (
                                   id_token_uuid UUID PRIMARY KEY,
                                   mot_passe_hache VARCHAR(255) NOT NULL,
                                   id_utilisateur_uuid UUID NOT NULL UNIQUE,
                                   FOREIGN KEY (id_utilisateur_uuid) REFERENCES utilisateurs(id_utilisateur_uuid)
);

CREATE TABLE auth_tokens_temporaire (
                                        id_token_temp_uuid UUID PRIMARY KEY,
                                        token_identifier VARCHAR(36) NOT NULL UNIQUE,
                                        token_hache VARCHAR(255) NOT NULL UNIQUE,
                                        type_token VARCHAR(255) NOT NULL,
                                        date_expiration TIMESTAMP(6) NOT NULL,
                                        is_used BOOLEAN NOT NULL,
                                        id_utilisateur_uuid UUID NOT NULL,
                                        FOREIGN KEY (id_utilisateur_uuid) REFERENCES utilisateurs(id_utilisateur_uuid)
);
CREATE INDEX idx_authtokentemp_token_identifier ON auth_tokens_temporaire (token_identifier);
CREATE INDEX idx_authtokentemp_token_hache ON auth_tokens_temporaire (token_hache);


CREATE TABLE methodes_paiement (
                                   id_methode BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                                   nom_methode_paiement VARCHAR(255) NOT NULL UNIQUE
);

CREATE TABLE disciplines (
                             id_discipline BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                             nom_discipline VARCHAR(100) NOT NULL,
                             date_discipline TIMESTAMP(6) NOT NULL,
                             nb_place_dispo INT NOT NULL CHECK (nb_place_dispo >= 0),
                             is_featured BOOLEAN DEFAULT FALSE NOT NULL,
                             version BIGINT,
                             id_adresse BIGINT NOT NULL,
                             FOREIGN KEY (id_adresse) REFERENCES adresses(id_adresse)
);
CREATE INDEX idx_discipline_nom ON disciplines (nom_discipline);
CREATE INDEX idx_discipline_date ON disciplines (date_discipline);


CREATE TABLE epreuves (
                          id_epreuve BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                          nom_epreuve VARCHAR(255),
                          is_featured BOOLEAN DEFAULT FALSE NOT NULL
);
CREATE INDEX idx_epreuve_nom_epreuve ON epreuves (nom_epreuve);


CREATE TABLE offres (
                        id_offre BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                        type_offre VARCHAR(255) NOT NULL,
                        quantite INT NOT NULL,
                        prix DECIMAL(10,2) NOT NULL,
                        date_expiration TIMESTAMP(6),
                        statut_offre VARCHAR(255) NOT NULL,
                        capacite INT NOT NULL,
                        version BIGINT,
                        id_discipline BIGINT NOT NULL,
                        featured BOOLEAN NOT NULL,
                        FOREIGN KEY (id_discipline) REFERENCES disciplines(id_discipline)
);
CREATE INDEX idx_offre_statut ON offres (statut_offre);
CREATE INDEX idx_offre_date_expiration ON offres (date_expiration);
CREATE INDEX idx_offre_discipline ON offres (id_discipline);


CREATE TABLE paniers (
                         id_panier BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                         montant_total DECIMAL(38,2) NOT NULL,
                         statut_panier VARCHAR(255) NOT NULL,
                         date_ajout TIMESTAMP(6) NOT NULL,
                         id_utilisateur_uuid UUID NOT NULL,
                         version BIGINT,
                         FOREIGN KEY (id_utilisateur_uuid) REFERENCES utilisateurs(id_utilisateur_uuid)
);
CREATE INDEX idx_paniers_statut ON paniers (statut_panier);


CREATE TABLE contenu_panier (
                                id_panier BIGINT NOT NULL,
                                id_offre BIGINT NOT NULL,
                                quantite_commandee INT NOT NULL,
                                PRIMARY KEY (id_panier, id_offre),
                                FOREIGN KEY (id_panier) REFERENCES paniers(id_panier),
                                FOREIGN KEY (id_offre) REFERENCES offres(id_offre)
);

CREATE TABLE paiements (
                           id_paiement BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                           statut_paiement VARCHAR(255) NOT NULL,
                           date_paiement TIMESTAMP(6) NOT NULL,
                           montant DECIMAL(38,2) NOT NULL,
                           id_methode_paiement BIGINT NOT NULL,
                           id_utilisateur UUID NOT NULL,
                           id_panier BIGINT NOT NULL UNIQUE,
                           FOREIGN KEY (id_methode_paiement) REFERENCES methodes_paiement(id_methode),
                           FOREIGN KEY (id_utilisateur) REFERENCES utilisateurs(id_utilisateur_uuid),
                           FOREIGN KEY (id_panier) REFERENCES paniers(id_panier)
);

CREATE TABLE transactions (
                              id_transaction BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                              montant DECIMAL(38,2) NOT NULL CHECK (montant >= 0),
                              date_transaction TIMESTAMP(6) NOT NULL,
                              statut_transaction VARCHAR(255) NOT NULL,
                              date_validation TIMESTAMP(6),
                              details_transaction TEXT,
                              is_test BOOLEAN NOT NULL,
                              id_payement BIGINT NOT NULL UNIQUE,
                              FOREIGN KEY (id_payement) REFERENCES paiements(id_paiement)
);

CREATE TABLE commandes (
                           id_commande BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                           num_commande VARCHAR(20) NOT NULL UNIQUE,
                           envoye_mail BOOLEAN NOT NULL,
                           id_payement BIGINT NOT NULL UNIQUE,
                           FOREIGN KEY (id_payement) REFERENCES paiements(id_paiement)
);

CREATE TABLE billets (
                         id_billet BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                         cle_finale_billet TEXT NOT NULL UNIQUE,
                         id_utilisateur_uuid UUID NOT NULL,
                         is_scanned boolean DEFAULT FALSE NOT NULL,
                         scanned_at TIMESTAMP NOT NULL DEFAULT NOW(),
                         purchase_date TIMESTAMP NOT NULL DEFAULT NOW(),
                         FOREIGN KEY (id_utilisateur_uuid) REFERENCES utilisateurs(id_utilisateur_uuid)
);

CREATE TABLE billet_offre (
                              id_billet BIGINT NOT NULL,
                              id_offre BIGINT NOT NULL,
                              PRIMARY KEY (id_billet, id_offre),
                              FOREIGN KEY (id_billet) REFERENCES billets(id_billet),
                              FOREIGN KEY (id_offre) REFERENCES offres(id_offre)
);

CREATE TABLE athletes (
                          id_athlete BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                          nom VARCHAR(100) NOT NULL,
                          prenom VARCHAR(100) NOT NULL,
                          id_pays BIGINT NOT NULL,
                          date_naissance DATE,
                          genre VARCHAR(10),
                          FOREIGN KEY (id_pays) REFERENCES pays(id_pays)
);

CREATE TABLE comporter (
                           id_discipline BIGINT NOT NULL,
                           id_epreuve BIGINT NOT NULL,
                           jr_de_medaille BOOLEAN,
                           PRIMARY KEY (id_discipline, id_epreuve),
                           FOREIGN KEY (id_discipline) REFERENCES disciplines(id_discipline),
                           FOREIGN KEY (id_epreuve) REFERENCES epreuves(id_epreuve)
);
CREATE INDEX idx_comporter_jr_de_medaille ON comporter (jr_de_medaille);


CREATE TABLE pratiquer (
                           id_athlete BIGINT NOT NULL,
                           id_epreuve BIGINT NOT NULL,
                           PRIMARY KEY (id_athlete, id_epreuve),
                           FOREIGN KEY (id_athlete) REFERENCES athletes(id_athlete),
                           FOREIGN KEY (id_epreuve) REFERENCES epreuves(id_epreuve)
);

CREATE TABLE oauths (
                        id_oauth UUID PRIMARY KEY,
                        id_utilisateur_uuid UUID NOT NULL UNIQUE,
                        google_id VARCHAR(255) UNIQUE,
                        facebook_id VARCHAR(255) UNIQUE,
                        FOREIGN KEY (id_utilisateur_uuid) REFERENCES utilisateurs(id_utilisateur_uuid)
);

CREATE TABLE telephones (
                            id_telephone BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                            type_tel VARCHAR(255) NOT NULL,
                            numero_telephone VARCHAR(20) NOT NULL UNIQUE,
                            id_utilisateur_uuid UUID NOT NULL,
                            FOREIGN KEY (id_utilisateur_uuid) REFERENCES utilisateurs(id_utilisateur_uuid)
);
